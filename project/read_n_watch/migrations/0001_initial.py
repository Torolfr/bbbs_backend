# Generated by Django 3.2.3 on 2021-09-26 04:41

import common.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms
import martor.models
import read_n_watch.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0004_activitytype_booktype_city_region_tag'),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('info', models.CharField(max_length=200, verbose_name='Информация')),
                ('annotation', models.TextField(max_length=1024, verbose_name='Аннотация')),
                ('article_url', models.URLField(max_length=192, verbose_name='Ссылка на статью')),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format='JPEG', help_text='Поддерживаемые форматы jpg, jpeg, gif, png, bmp. Размер до 10 Мб.', keep_meta=True, null=True, quality=100, size=[1280, 720], upload_to='articles/', validators=[read_n_watch.validators.file_size_validator, read_n_watch.validators.image_extension_validator], verbose_name='Изображение')),
                ('image_url', models.URLField(blank=True, help_text='Альтернативный способ загрузки изображения. Приоритет у файла.', max_length=192, null=True, verbose_name='Ссылка на изображение')),
                ('output_to_main', models.BooleanField(default=False, help_text='Статьи с этой меткой будут отображаться на главной странице.', verbose_name='Отображать на главной странице')),
                ('pinned_full_size', models.BooleanField(default=False, help_text='Статья с этой меткой будет отображатьсяв полноразмерном формате вверху страницы.', verbose_name='Закрепить')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ('-id',),
            },
            bases=(models.Model, common.models.ImageFromUrlMixin),
        ),
        migrations.CreateModel(
            name='Catalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Отображается над изображением.', max_length=1024, verbose_name='Верхний абзац')),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format='JPEG', help_text='Поддерживаемые форматы jpg, jpeg, gif, png, bmp. Размер до 10 Мб.', keep_meta=True, null=True, quality=100, size=[1280, 720], upload_to='catalog/', validators=[read_n_watch.validators.file_size_validator, read_n_watch.validators.image_extension_validator], verbose_name='Изображение')),
                ('image_url', models.URLField(help_text='Альтернативный способ загрузки изображения. Приоритет у файла.', max_length=192, verbose_name='Ссылка на изображение')),
                ('image_caption', models.CharField(blank=True, help_text='Отображается под изображением.', max_length=200, null=True, verbose_name='Подпись к изображению')),
                ('body', martor.models.MartorField(help_text='Основной текст статьи. Пожалуйста, используйте форматирование.', verbose_name='Текст статьи')),
            ],
            options={
                'verbose_name': 'Справочник',
                'verbose_name_plural': 'Справочник',
                'ordering': ('-id',),
            },
            bases=(models.Model, common.models.ImageFromUrlMixin),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('info', models.TextField(max_length=512, verbose_name='Информация')),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format='JPEG', help_text='Поддерживаемые форматы jpg, jpeg, gif, png, bmp. Размер до 10 Мб.', keep_meta=True, null=True, quality=100, size=[1280, 720], upload_to='videos/', validators=[read_n_watch.validators.file_size_validator, read_n_watch.validators.image_extension_validator], verbose_name='Изображение')),
                ('link', models.URLField(max_length=192, verbose_name='Ссылка на видеоролик')),
                ('duration', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(86400)], verbose_name='Длина видео в сек.')),
                ('output_to_main', models.BooleanField(default=False, help_text='Видео с этой меткой будут отображаться на главной странице.', verbose_name='Отображать на главной странице')),
                ('pinned_full_size', models.BooleanField(default=False, help_text='Видео с этой меткой будет отображатьсяв полноразмерном формате вверху страницы.', verbose_name='Закрепить')),
                ('resource_group', models.BooleanField(default=False, help_text='Видео с этой меткой не будут показаныне авторизованным пользователям.', verbose_name='Ресурсная группа')),
                ('tags', models.ManyToManyField(limit_choices_to={'category': 'Видеоролики'}, related_name='videos', to='common.Tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Видеоролик',
                'verbose_name_plural': 'Видеоролики',
                'ordering': ('-id',),
            },
            bases=(models.Model, common.models.ImageFromUrlMixin),
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('info', models.CharField(max_length=512, verbose_name='Информация')),
                ('annotation', models.TextField(max_length=1024, verbose_name='Аннотация')),
                ('image', django_resized.forms.ResizedImageField(blank=True, crop=['middle', 'center'], force_format='JPEG', help_text='Поддерживаемые форматы jpg, jpeg, gif, png, bmp. Размер до 10 Мб.', keep_meta=True, null=True, quality=100, size=[1280, 720], upload_to='movies/', validators=[read_n_watch.validators.file_size_validator, read_n_watch.validators.image_extension_validator], verbose_name='Изображение')),
                ('link', models.URLField(max_length=192, verbose_name='Ссылка на фильм')),
                ('output_to_main', models.BooleanField(default=False, help_text='Фильмы с этой меткой будут отображаться на главной странице.', verbose_name='Отображать на главной странице')),
                ('tags', models.ManyToManyField(limit_choices_to={'category': 'Фильмы'}, related_name='movies', to='common.Tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Фильм',
                'verbose_name_plural': 'Фильмы',
                'ordering': ('-id',),
            },
            bases=(models.Model, common.models.ImageFromUrlMixin),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Заголовок')),
                ('author', models.CharField(max_length=256, verbose_name='Автор')),
                ('year', models.SmallIntegerField(validators=[read_n_watch.validators.year_validator], verbose_name='Год публикации')),
                ('annotation', models.TextField(max_length=1024, verbose_name='Аннотация')),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='common.booktype', verbose_name='Тип книги')),
            ],
            options={
                'verbose_name': 'Книга',
                'verbose_name_plural': 'Книги',
                'ordering': ('-id',),
            },
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['type'], name='book_type_slug_index'),
        ),
    ]
